#!/usr/bin/python

'''
pull_uniprot

From the group file with all sequences in Uniprot generated by usearch, 
get the sequences and their groups that have swissprot sequences in them.

Created by JJ Chai on 12/09/2013
Last modified 12/09/2013
Copyright (c) 2013 JJ Chai (ORNL). All rights reserved.
 
'''
# Import Python modules
import sys, warnings, os
import time
import glob
from datetime import datetime
import re
#from subprocess import Popen, PIPE, check_call, STDOUT

# Import local modules
#sys.path.append("/chongle/jj/01_PfClust/scripts")
#sys.path.append("/Users/cjg/Work/01_PfClust/scripts")
#import jj_utils

## =================================================================
## argument parser
## =================================================================
import argparse

## Version
version_str = "0.0.1"
'''first version of annotation assignment
'''

parser = argparse.ArgumentParser(description="Pull sequences from Uniprot to the swissprot clusters",
    prog = 'pull_uniprot', #program name
    prefix_chars='-', # prefix for options
    fromfile_prefix_chars='@', # if options are read from file, '@args.txt'
    conflict_handler='resolve', # for handling conflict options
    add_help=True, # include help in the options
    formatter_class=argparse.ArgumentDefaultsHelpFormatter # print default values for options in help message
    )
## version control
parser.add_argument("--version", action="version",version='%(prog)s {}'.format(version_str))

## --verbose mode, default: false (quiet mode)
parser.add_argument("-v", "--verbose", action="store_true",help="verbose mode, more output")

## input and output group file
parser.add_argument("-i","--input",help="input group file, with all sequences in uniprot",dest='inputfile',required=True)
parser.add_argument("-o","--output",help="output group file with all the sequences whose groups contain swissprot sequences",dest='outputfile',required=True)
parser.add_argument("-c", "--cutoff", help="maximum protein length cutoff, proteins longer than this length won't be saved", dest='cutoff', default=5000, type=int)
## =================================================================
## annotation function
## =================================================================

def pull_uniprot(inputfile, outputfile, cutoff):
    ''' Add trembl sequences to the swissprot clusters generated by usearch.
        The input group file is sorted by sequence IDs, therefore the swissport sequences (sp|...)
        show up in front of the trembl sequences.
    '''
    groups = set() # set of groupIDs that have swissprot sequences
    with open(inputfile,'r') as inGroup:
        for line in inGroup:
            if line[0:2] == "sp": # swissprot sequence
                line = line.strip("\n").split("\t")
                groupID = line[1]
                length = line[2]
                if length[-1] == "*":
                    length = int(length[:-1])
                else:
                    length=int(length)
                if length <= cutoff:
                    groups.add(groupID) # add this group to the groupID set
            else:
                continue
    print("number of groups: ", len(groups))
    output = open(outputfile,'w') # outputfile
    with open(inputfile,'r') as inGroup:
        for line in inGroup:
            groupID = line.strip("\n").split("\t")[1]
            if groupID in groups:
                output.write(line)
    output.close()


## =================================================================
## main function
## =================================================================
def main(argv=None):

    if argv is None:
        args = parser.parse_args()

    ## print some information
    if args.verbose:
        print('running verbosely')
        print('input group file is: {}'.format(args.inputfile))
        print('output group file is: {}'.format(args.outputfile))
    else:
        print('running quietly\n')
    ## display work start, and time record
    start_time = datetime.now()
    sys.stderr.write("\n===============================================================================\n")
    sys.stderr.write("Pull Uniprot sequences\n")
    ## run program and generate the fasta files
    pull_uniprot(args.inputfile,args.outputfile, args.cutoff)
    ## display work end, and time record, elapsed time
    #finish_time = datetime.now()
    #duration = finish_time - start_time
    #sys.stderr.write("\nTotal Elapsed Time = [%s] [seconds] \n" % jj_utils.format_time(duration))
    #sys.stderr.write("===============================================================================\n")

##==============================================================
## call from command line (instead of interactively)
##==============================================================

if __name__ == '__main__':
    sys.exit(main())
